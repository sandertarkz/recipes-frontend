/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  HTTPValidationError,
  PostCreate,
  PostPublic,
} from "../models/index";
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  PostCreateFromJSON,
  PostCreateToJSON,
  PostPublicFromJSON,
  PostPublicToJSON,
} from "../models/index";

export interface CreatePostPostsPostRequest {
  postCreate: PostCreate;
}

export interface DeletePostPostsIdDeleteRequest {
  id: number;
}

export interface GetPostPostsIdGetRequest {
  id: number;
}

export interface GetPostsPostsGetRequest {
  limit?: number;
  offset?: number;
  search?: string | null;
}

export interface RatePostPostsIdRatePostRequest {
  id: number;
  rating: number;
}

export interface UpdatePostPostsIdPutRequest {
  id: number;
  postCreate: PostCreate;
}

/**
 *
 */
export class PostsApi extends runtime.BaseAPI {
  /**
   * Create Post
   */
  async createPostPostsPostRaw(
    requestParameters: CreatePostPostsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostPublic>> {
    if (requestParameters["postCreate"] == null) {
      throw new runtime.RequiredError(
        "postCreate",
        'Required parameter "postCreate" was null or undefined when calling createPostPostsPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "OAuth2PasswordBearer",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/posts`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PostCreateToJSON(requestParameters["postCreate"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PostPublicFromJSON(jsonValue),
    );
  }

  /**
   * Create Post
   */
  async createPostPostsPost(
    requestParameters: CreatePostPostsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostPublic> {
    const response = await this.createPostPostsPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete Post
   */
  async deletePostPostsIdDeleteRaw(
    requestParameters: DeletePostPostsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling deletePostPostsIdDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "OAuth2PasswordBearer",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/posts/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete Post
   */
  async deletePostPostsIdDelete(
    requestParameters: DeletePostPostsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deletePostPostsIdDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Get Post
   */
  async getPostPostsIdGetRaw(
    requestParameters: GetPostPostsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostPublic>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getPostPostsIdGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/posts/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PostPublicFromJSON(jsonValue),
    );
  }

  /**
   * Get Post
   */
  async getPostPostsIdGet(
    requestParameters: GetPostPostsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostPublic> {
    const response = await this.getPostPostsIdGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get Posts
   */
  async getPostsPostsGetRaw(
    requestParameters: GetPostsPostsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PostPublic>>> {
    const queryParameters: any = {};

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    if (requestParameters["search"] != null) {
      queryParameters["search"] = requestParameters["search"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/posts`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PostPublicFromJSON),
    );
  }

  /**
   * Get Posts
   */
  async getPostsPostsGet(
    requestParameters: GetPostsPostsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PostPublic>> {
    const response = await this.getPostsPostsGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Rate Post
   */
  async ratePostPostsIdRatePostRaw(
    requestParameters: RatePostPostsIdRatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostPublic>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling ratePostPostsIdRatePost().',
      );
    }

    if (requestParameters["rating"] == null) {
      throw new runtime.RequiredError(
        "rating",
        'Required parameter "rating" was null or undefined when calling ratePostPostsIdRatePost().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["rating"] != null) {
      queryParameters["rating"] = requestParameters["rating"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "OAuth2PasswordBearer",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/posts/{id}/rate`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PostPublicFromJSON(jsonValue),
    );
  }

  /**
   * Rate Post
   */
  async ratePostPostsIdRatePost(
    requestParameters: RatePostPostsIdRatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostPublic> {
    const response = await this.ratePostPostsIdRatePostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update Post
   */
  async updatePostPostsIdPutRaw(
    requestParameters: UpdatePostPostsIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostPublic>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling updatePostPostsIdPut().',
      );
    }

    if (requestParameters["postCreate"] == null) {
      throw new runtime.RequiredError(
        "postCreate",
        'Required parameter "postCreate" was null or undefined when calling updatePostPostsIdPut().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "OAuth2PasswordBearer",
        [],
      );
    }

    const response = await this.request(
      {
        path: `/posts/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: PostCreateToJSON(requestParameters["postCreate"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PostPublicFromJSON(jsonValue),
    );
  }

  /**
   * Update Post
   */
  async updatePostPostsIdPut(
    requestParameters: UpdatePostPostsIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostPublic> {
    const response = await this.updatePostPostsIdPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
