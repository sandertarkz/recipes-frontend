/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface PagePostPublic
 */
export interface PagePostPublic {
    /**
     * 
     * @type {Array<PostPublic>}
     * @memberof PagePostPublic
     */
    'items': Array<PostPublic>;
    /**
     * 
     * @type {number}
     * @memberof PagePostPublic
     */
    'total': number | null;
    /**
     * 
     * @type {number}
     * @memberof PagePostPublic
     */
    'page': number | null;
    /**
     * 
     * @type {number}
     * @memberof PagePostPublic
     */
    'size': number | null;
    /**
     * 
     * @type {number}
     * @memberof PagePostPublic
     */
    'pages'?: number | null;
}
/**
 * 
 * @export
 * @interface PostCreate
 */
export interface PostCreate {
    /**
     * 
     * @type {string}
     * @memberof PostCreate
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PostCreate
     */
    'content': string;
    /**
     * 
     * @type {boolean}
     * @memberof PostCreate
     */
    'published'?: boolean | null;
}
/**
 * 
 * @export
 * @interface PostPublic
 */
export interface PostPublic {
    /**
     * 
     * @type {string}
     * @memberof PostPublic
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PostPublic
     */
    'content': string;
    /**
     * 
     * @type {boolean}
     * @memberof PostPublic
     */
    'published'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof PostPublic
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PostPublic
     */
    'created_at': string;
    /**
     * 
     * @type {UserPublic}
     * @memberof PostPublic
     */
    'owner': UserPublic;
    /**
     * 
     * @type {number}
     * @memberof PostPublic
     */
    'average_rating': number;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'token_type': string;
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserLogin
 */
export interface UserLogin {
    /**
     * 
     * @type {string}
     * @memberof UserLogin
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserLogin
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserPublic
 */
export interface UserPublic {
    /**
     * 
     * @type {number}
     * @memberof UserPublic
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UserPublic
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserPublic
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserPublic
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create User
         * @param {UserLogin} userLogin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserLoginPost: async (userLogin: UserLogin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLogin' is not null or undefined
            assertParamExists('createUserLoginPost', 'userLogin', userLogin)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLogin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {UserLogin} userLogin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserLoginPost(userLogin: UserLogin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserLoginPost(userLogin, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.createUserLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {AuthApiCreateUserLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserLoginPost(requestParameters: AuthApiCreateUserLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.createUserLoginPost(requestParameters.userLogin, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createUserLoginPost operation in AuthApi.
 * @export
 * @interface AuthApiCreateUserLoginPostRequest
 */
export interface AuthApiCreateUserLoginPostRequest {
    /**
     * 
     * @type {UserLogin}
     * @memberof AuthApiCreateUserLoginPost
     */
    readonly userLogin: UserLogin
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Create User
     * @param {AuthApiCreateUserLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public createUserLoginPost(requestParameters: AuthApiCreateUserLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).createUserLoginPost(requestParameters.userLogin, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PostsApi - axios parameter creator
 * @export
 */
export const PostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Post
         * @param {PostCreate} postCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPostPostsPost: async (postCreate: PostCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postCreate' is not null or undefined
            assertParamExists('createPostPostsPost', 'postCreate', postCreate)
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostPostsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePostPostsIdDelete', 'id', id)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostPostsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPostPostsIdGet', 'id', id)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Posts
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string | null} [search] 
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostsPostsGet: async (limit?: number, offset?: number, search?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rate Post
         * @param {number} id 
         * @param {number} rating 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratePostPostsIdRatePost: async (id: number, rating: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ratePostPostsIdRatePost', 'id', id)
            // verify required parameter 'rating' is not null or undefined
            assertParamExists('ratePostPostsIdRatePost', 'rating', rating)
            const localVarPath = `/posts/{id}/rate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (rating !== undefined) {
                localVarQueryParameter['rating'] = rating;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Post
         * @param {number} id 
         * @param {PostCreate} postCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostPostsIdPut: async (id: number, postCreate: PostCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePostPostsIdPut', 'id', id)
            // verify required parameter 'postCreate' is not null or undefined
            assertParamExists('updatePostPostsIdPut', 'postCreate', postCreate)
            const localVarPath = `/posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Post
         * @param {PostCreate} postCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPostPostsPost(postCreate: PostCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPostPostsPost(postCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostsApi.createPostPostsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePostPostsIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePostPostsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostsApi.deletePostPostsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Post
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostPostsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostPostsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostsApi.getPostPostsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Posts
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string | null} [search] 
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostsPostsGet(limit?: number, offset?: number, search?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagePostPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostsPostsGet(limit, offset, search, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostsApi.getPostsPostsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Rate Post
         * @param {number} id 
         * @param {number} rating 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratePostPostsIdRatePost(id: number, rating: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratePostPostsIdRatePost(id, rating, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostsApi.ratePostPostsIdRatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Post
         * @param {number} id 
         * @param {PostCreate} postCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePostPostsIdPut(id: number, postCreate: PostCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePostPostsIdPut(id, postCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PostsApi.updatePostPostsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Post
         * @param {PostsApiCreatePostPostsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPostPostsPost(requestParameters: PostsApiCreatePostPostsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostPublic> {
            return localVarFp.createPostPostsPost(requestParameters.postCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Post
         * @param {PostsApiDeletePostPostsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostPostsIdDelete(requestParameters: PostsApiDeletePostPostsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePostPostsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Post
         * @param {PostsApiGetPostPostsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostPostsIdGet(requestParameters: PostsApiGetPostPostsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostPublic> {
            return localVarFp.getPostPostsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Posts
         * @param {PostsApiGetPostsPostsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostsPostsGet(requestParameters: PostsApiGetPostsPostsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PagePostPublic> {
            return localVarFp.getPostsPostsGet(requestParameters.limit, requestParameters.offset, requestParameters.search, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rate Post
         * @param {PostsApiRatePostPostsIdRatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratePostPostsIdRatePost(requestParameters: PostsApiRatePostPostsIdRatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostPublic> {
            return localVarFp.ratePostPostsIdRatePost(requestParameters.id, requestParameters.rating, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Post
         * @param {PostsApiUpdatePostPostsIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostPostsIdPut(requestParameters: PostsApiUpdatePostPostsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostPublic> {
            return localVarFp.updatePostPostsIdPut(requestParameters.id, requestParameters.postCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPostPostsPost operation in PostsApi.
 * @export
 * @interface PostsApiCreatePostPostsPostRequest
 */
export interface PostsApiCreatePostPostsPostRequest {
    /**
     * 
     * @type {PostCreate}
     * @memberof PostsApiCreatePostPostsPost
     */
    readonly postCreate: PostCreate
}

/**
 * Request parameters for deletePostPostsIdDelete operation in PostsApi.
 * @export
 * @interface PostsApiDeletePostPostsIdDeleteRequest
 */
export interface PostsApiDeletePostPostsIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof PostsApiDeletePostPostsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for getPostPostsIdGet operation in PostsApi.
 * @export
 * @interface PostsApiGetPostPostsIdGetRequest
 */
export interface PostsApiGetPostPostsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof PostsApiGetPostPostsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for getPostsPostsGet operation in PostsApi.
 * @export
 * @interface PostsApiGetPostsPostsGetRequest
 */
export interface PostsApiGetPostsPostsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof PostsApiGetPostsPostsGet
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof PostsApiGetPostsPostsGet
     */
    readonly offset?: number

    /**
     * 
     * @type {string}
     * @memberof PostsApiGetPostsPostsGet
     */
    readonly search?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof PostsApiGetPostsPostsGet
     */
    readonly page?: number

    /**
     * Page size
     * @type {number}
     * @memberof PostsApiGetPostsPostsGet
     */
    readonly size?: number
}

/**
 * Request parameters for ratePostPostsIdRatePost operation in PostsApi.
 * @export
 * @interface PostsApiRatePostPostsIdRatePostRequest
 */
export interface PostsApiRatePostPostsIdRatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof PostsApiRatePostPostsIdRatePost
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof PostsApiRatePostPostsIdRatePost
     */
    readonly rating: number
}

/**
 * Request parameters for updatePostPostsIdPut operation in PostsApi.
 * @export
 * @interface PostsApiUpdatePostPostsIdPutRequest
 */
export interface PostsApiUpdatePostPostsIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof PostsApiUpdatePostPostsIdPut
     */
    readonly id: number

    /**
     * 
     * @type {PostCreate}
     * @memberof PostsApiUpdatePostPostsIdPut
     */
    readonly postCreate: PostCreate
}

/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export class PostsApi extends BaseAPI {
    /**
     * 
     * @summary Create Post
     * @param {PostsApiCreatePostPostsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public createPostPostsPost(requestParameters: PostsApiCreatePostPostsPostRequest, options?: RawAxiosRequestConfig) {
        return PostsApiFp(this.configuration).createPostPostsPost(requestParameters.postCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Post
     * @param {PostsApiDeletePostPostsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public deletePostPostsIdDelete(requestParameters: PostsApiDeletePostPostsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return PostsApiFp(this.configuration).deletePostPostsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Post
     * @param {PostsApiGetPostPostsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public getPostPostsIdGet(requestParameters: PostsApiGetPostPostsIdGetRequest, options?: RawAxiosRequestConfig) {
        return PostsApiFp(this.configuration).getPostPostsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Posts
     * @param {PostsApiGetPostsPostsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public getPostsPostsGet(requestParameters: PostsApiGetPostsPostsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return PostsApiFp(this.configuration).getPostsPostsGet(requestParameters.limit, requestParameters.offset, requestParameters.search, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rate Post
     * @param {PostsApiRatePostPostsIdRatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public ratePostPostsIdRatePost(requestParameters: PostsApiRatePostPostsIdRatePostRequest, options?: RawAxiosRequestConfig) {
        return PostsApiFp(this.configuration).ratePostPostsIdRatePost(requestParameters.id, requestParameters.rating, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Post
     * @param {PostsApiUpdatePostPostsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public updatePostPostsIdPut(requestParameters: PostsApiUpdatePostPostsIdPutRequest, options?: RawAxiosRequestConfig) {
        return PostsApiFp(this.configuration).updatePostPostsIdPut(requestParameters.id, requestParameters.postCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsersPost: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('createUserUsersPost', 'userCreate', userCreate)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsersIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserUsersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsersPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserUsersPost(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.createUserUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUsersIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPublic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserUsersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUserUsersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {UsersApiCreateUserUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsersPost(requestParameters: UsersApiCreateUserUsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserPublic> {
            return localVarFp.createUserUsersPost(requestParameters.userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User
         * @param {UsersApiGetUserUsersIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUsersIdGet(requestParameters: UsersApiGetUserUsersIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserPublic> {
            return localVarFp.getUserUsersIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createUserUsersPost operation in UsersApi.
 * @export
 * @interface UsersApiCreateUserUsersPostRequest
 */
export interface UsersApiCreateUserUsersPostRequest {
    /**
     * 
     * @type {UserCreate}
     * @memberof UsersApiCreateUserUsersPost
     */
    readonly userCreate: UserCreate
}

/**
 * Request parameters for getUserUsersIdGet operation in UsersApi.
 * @export
 * @interface UsersApiGetUserUsersIdGetRequest
 */
export interface UsersApiGetUserUsersIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiGetUserUsersIdGet
     */
    readonly id: number
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Create User
     * @param {UsersApiCreateUserUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUserUsersPost(requestParameters: UsersApiCreateUserUsersPostRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUserUsersPost(requestParameters.userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User
     * @param {UsersApiGetUserUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserUsersIdGet(requestParameters: UsersApiGetUserUsersIdGetRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserUsersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



